(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return b64.length * 3 / 4 - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, j, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr(len * 3 / 4 - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}

},{}],2:[function(require,module,exports){

},{}],3:[function(require,module,exports){
(function (global){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"base64-js":1,"ieee754":4,"isarray":5}],4:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],5:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],6:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],7:[function(require,module,exports){
window.onload = function(){
  var poem = require("./index.js");
  var secureRandom = require("secure-random");
  function randomWords(count, bits){
    var words = [];
    for (var i=0; i<count; ++i){
      var w = secureRandom.randomArray(4);
      var r = (w[0]*0x10000 + w[1]*0x100 + w[2]) % Math.pow(2,bits);
      words.push(r);
    };
    return words;
  };

  // This code is quite messy, never mind it

  var main = document.getElementById("main");

  var text = document.createElement("textarea");
  text.cols = 100;
  text.rows = 400;

  var genRandomButton = document.createElement("button");
  genRandomButton.innerHTML = "Generate Random Key";
  genRandomButton.onclick = function(){
    loadWords(randomWords(9, 9));
  };

  var loadWordsButton = document.createElement("button");
  loadWordsButton.innerHTML = "Load Key";
  loadWordsButton.onclick = function(){
    try {
      var key = prompt("key:");
      if (!key) throw "";
      key = key.split(" ");
      if (key.length !== 9) throw "";
      key = key.map(function(n){ return parseInt(n, 16); });
      loadWords(key);
    } catch (e) {
      alert("Wrong key");
    }
  };

  var loadRhymButton = document.createElement("button");
  loadRhymButton.innerHTML = "Load Poem";
  loadRhymButton.onclick = function(){
    try {
      var rhyme = prompt("poem:");
      var words = poem.toWords(rhyme);
      if (words.indexOf(-1) !== -1) throw "";
      loadWords(words);
    } catch (e) {
      alert("Wrong poem");
    }
  };

  var buttonsDiv = document.createElement("div");
  buttonsDiv.appendChild(genRandomButton);
  buttonsDiv.appendChild(loadWordsButton);
  buttonsDiv.appendChild(loadRhymButton);

  main.appendChilld(buttonsDiv);
  main.appendChild(text);

  function loadWords(key){
    text.innerHTML
      = "Key: "+key.map(function(n){return n.toString(16).toUpperCase()}).join(" ")+"\n"
      + poem.fromWords(key)+"\n"
      + "\n"
      + text.innerHTML;
  };
};

},{"./index.js":10,"secure-random":11}],8:[function(require,module,exports){
module.exports={
  "rainstorm": "form",
  "rabbits": "habits",
  "burst": "cursed",
  "creature": "teacher",
  "airplane": "brain",
  "sail": "male",
  "goat": "boat",
  "cork": "fork",
  "pencil": "stencil",
  "tooth": "truth",
  "cakes": "flakes",
  "banana": "bandana",
  "nest": "breast",
  "stranger": "danger",
  "jewel": "tool",
  "beginner": "winner",
  "worm": "germ",
  "wound": "round",
  "dock": "block",
  "bite": "fight",
  "wrist": "fist",
  "ant": "plant",
  "sticks": "tricks",
  "potato": "rainbow",
  "drain": "vein",
  "kitty": "city",
  "planes": "lanes",
  "nut": "cut",
  "slope": "rope",
  "tent": "scent",
  "thunder": "wonder",
  "jar": "bar",
  "nerve": "curve",
  "pest": "breast",
  "smell": "cell",
  "balloon": "rune",
  "giants": "clients",
  "flesh": "mesh",
  "shame": "fame",
  "shake": "break",
  "fog": "dog",
  "hose": "prose",
  "rhythm": "algorithm",
  "shade": "blade",
  "pig": "rig",
  "twist": "gist",
  "thumb": "drum",
  "hammer": "clamor",
  "lace": "place",
  "verse": "curse",
  "jail": "snail",
  "collar": "scholar",
  "snake": "mistake",
  "cave": "rave",
  "lip": "chip",
  "bat": "rat",
  "reward": "chord",
  "fork": "pork",
  "frog": "smog",
  "horn": "born",
  "grip": "chip",
  "brick": "click",
  "sink": "drink",
  "screw": "hue",
  "dirt": "shirt",
  "trick": "kick",
  "invention": "tension",
  "protest": "guest",
  "cow": "bow",
  "duck": "luck",
  "chess": "stress",
  "trains": "brains",
  "knee": "flee",
  "flame": "fame",
  "clocks": "rocks",
  "bee": "tree",
  "swim": "grim",
  "bubble": "trouble",
  "paste": "waist",
  "sheep": "jeep",
  "tub": "club",
  "appliance": "science",
  "joke": "oak",
  "nail": "tale",
  "rabbit": "habit",
  "brake": "cake",
  "fold": "cold",
  "pie": "cry",
  "butter": "clutter",
  "stamp": "clamp",
  "cloth": "moth",
  "teeth": "heath",
  "laugh": "staff",
  "oven": "coven",
  "honey": "bunny",
  "skirt": "dirt",
  "monkey": "punky",
  "tongue": "young",
  "deer": "year",
  "brush": "rush",
  "bomb": "tomb",
  "suggestion": "question",
  "sisters": "blisters",
  "breath": "death",
  "grain": "train",
  "nose": "close",
  "underwear": "blair",
  "tail": "whale",
  "rat": "cat",
  "slave": "rave",
  "tin": "chin",
  "farmer": "armor",
  "corn": "thorn",
  "bikes": "spikes",
  "cemetery": "cranberry",
  "railway": "weekday",
  "eggs": "legs",
  "juice": "moose",
  "waves": "caves",
  "creator": "crater",
  "curve": "nerve",
  "steam": "dream",
  "shelf": "elf",
  "knife": "life",
  "cloud": "crowd",
  "cord": "sword",
  "crowd": "cloud",
  "beef": "thief",
  "blade": "raid",
  "zoo": "crew",
  "cry": "buy",
  "coal": "hole",
  "mask": "task",
  "beam": "steam",
  "jeans": "teens",
  "mice": "dice",
  "attraction": "action",
  "doll": "mall",
  "belief": "thief",
  "coat": "quote",
  "destruction": "prodution",
  "jam": "scam",
  "soap": "rope",
  "mint": "hint",
  "boundary": "foundry",
  "swing": "coiling",
  "egg": "leg",
  "cherry": "berry",
  "grass": "brass",
  "slip": "trip",
  "pot": "clot",
  "meal": "deal",
  "kick": "chick",
  "silk": "milk",
  "rod": "pod",
  "leaf": "chief",
  "bread": "thread",
  "burn": "turn",
  "trucks": "bucks",
  "smile": "crocodile",
  "drum": "scrum",
  "harbor": "barber",
  "toe": "blow",
  "brass": "grass",
  "wealth": "stealth",
  "throat": "oat",
  "ghost": "host",
  "receipt": "cheat",
  "copper": "chopper",
  "lamp": "stamp",
  "surprise": "cries",
  "beast": "feast",
  "kiss": "bliss",
  "roof": "route",
  "shock": "hawk",
  "ear": "tier",
  "dust": "bust",
  "yard": "bard",
  "dad": "fad",
  "lift": "drift",
  "boats": "coats",
  "cats": "rats",
  "chairs": "hairs",
  "existence": "distance",
  "horses": "forces",
  "pipe": "gripe",
  "fifth": "myth",
  "actor": "factor",
  "sand": "brand",
  "shoe": "view",
  "pen": "men",
  "cake": "brake",
  "smoke": "joke",
  "crack": "wrack",
  "crown": "town",
  "cheese": "squeeze",
  "quiet": "diet",
  "pleasure": "leisure",
  "alarm": "farm",
  "hobbies": "lobbies",
  "rail": "jail",
  "taste": "waste",
  "wing": "king",
  "neck": "deck",
  "leg": "egg",
  "gate": "mate",
  "bone": "stone",
  "meat": "wheat",
  "desire": "satire",
  "seed": "weed",
  "plane": "crane",
  "humor": "rumor",
  "reaction": "transaction",
  "beds": "heads",
  "afternoon": "balloon",
  "pump": "jump",
  "plot": "clot",
  "pull": "bull",
  "journey": "tourney",
  "birds": "words",
  "suit": "fruit",
  "spy": "comply",
  "visitor": "inquisitor",
  "calculator": "opeartor",
  "muscle": "hustle",
  "push": "bush",
  "lunch": "punch",
  "milk": "silk",
  "expansion": "mansion",
  "rice": "dice",
  "hate": "bait",
  "paint": "saint",
  "territory": "repertory",
  "dolls": "balls",
  "tank": "prank",
  "brothers": "others",
  "lock": "shock",
  "relation": "station",
  "stick": "chick",
  "legs": "eggs",
  "discovery": "recovery",
  "fruit": "flute",
  "gun": "sun",
  "mouth": "south",
  "bears": "tears",
  "notebook": "rook",
  "border": "order",
  "trail": "rail",
  "wave": "cave",
  "arm": "farm",
  "plate": "fate",
  "bike": "hike",
  "hat": "cat",
  "cook": "book",
  "coach": "poach",
  "trouble": "bubble",
  "sister": "mister",
  "pin": "bin",
  "noise": "poise",
  "attempt": "tempt",
  "bell": "cell",
  "salt": "fault",
  "wheel": "steel",
  "ink": "pink",
  "cap": "clap",
  "shape": "ape",
  "cream": "team",
  "dinner": "winner",
  "pets": "jets",
  "hole": "mole",
  "bedroom": "gloom",
  "rain": "brain",
  "feeling": "ceiling",
  "clock": "walk",
  "spot": "shot",
  "toy": "boy",
  "sky": "fly",
  "dress": "mess",
  "trees": "breeze",
  "daughter": "potter",
  "fear": "gear",
  "fly": "spy",
  "moon": "doom",
  "dogs": "logs",
  "ticket": "cricket",
  "mine": "airline",
  "rings": "kings",
  "seat": "heat",
  "drink": "wink",
  "writer": "fighter",
  "scene": "screen",
  "bird": "word",
  "sleep": "sheep",
  "mom": "bomb",
  "birthday": "airway",
  "lawyer": "annoyer",
  "bath": "path",
  "roll": "troll",
  "fight": "sight",
  "cent": "rent",
  "judge": "nudge",
  "wire": "spire",
  "battle": "cattle",
  "blow": "glow",
  "route": "loot",
  "train": "plain",
  "ocean": "motion",
  "bear": "hair",
  "measure": "treasure",
  "ray": "bay",
  "behavior": "savior",
  "truck": "duck",
  "queen": "teen",
  "flag": "tag",
  "flower": "shower",
  "cast": "past",
  "brain": "train",
  "direction": "section",
  "boat": "throat",
  "brother": "other",
  "profit": "prophet",
  "approval": "removal",
  "baseball": "brawl",
  "bridge": "fridge",
  "camp": "lamp",
  "snow": "crow",
  "plastic": "gymnastic",
  "attack": "hack",
  "chain": "brain",
  "plants": "ants",
  "quarter": "mortar",
  "birth": "girth",
  "branch": "ranch",
  "guitar": "bar",
  "drop": "shop",
  "hearing": "earring",
  "stream": "dream",
  "competition": "ambition",
  "argument": "parliament",
  "rose": "pose",
  "pocket": "rocket",
  "walk": "talk",
  "fuel": "duel",
  "flight": "right",
  "heat": "seat",
  "patch": "match",
  "driving": "finding",
  "religion": "pigeon",
  "crime": "time",
  "mass": "grass",
  "foot": "input",
  "apparel": "barrel",
  "shirt": "dirt",
  "letters": "sweaters",
  "bag": "tag",
  "chair": "stair",
  "minute": "dispute",
  "waste": "taste",
  "balance": "balance",
  "ice": "price",
  "root": "foot",
  "edge": "ledge",
  "pain": "gain",
  "stone": "home",
  "leather": "weather",
  "wind": "find",
  "ball": "mall",
  "chance": "dance",
  "motion": "potion",
  "minister": "sinister",
  "jump": "chump",
  "sheet": "wheat",
  "nation": "information",
  "army": "barmy",
  "attention": "tension",
  "square": "fair",
  "basket": "casket",
  "cup": "pup",
  "pet": "vet",
  "detail": "trail",
  "secretary": "cherry",
  "frame": "name",
  "scale": "gale",
  "parent": "errant",
  "cat": "hat",
  "transport": "sort",
  "fan": "van",
  "fiction": "addiction",
  "coast": "ghost",
  "peace": "piece",
  "farm": "harm",
  "eyes": "guys",
  "trip": "ship",
  "respect": "affect",
  "father": "bother",
  "hands": "lands",
  "songs": "tongs",
  "steel": "wheel",
  "apple": "pineapple",
  "wood": "hood",
  "debt": "pet",
  "winter": "splinter",
  "stage": "rage",
  "sense": "fence",
  "string": "wing",
  "eye": "guy",
  "fish": "dish",
  "plant": "chant",
  "rest": "pest",
  "morning": "warning",
  "boys": "toys",
  "match": "hatch",
  "floor": "shore",
  "mountain": "fountain",
  "grade": "trade",
  "ring": "wing",
  "skin": "win",
  "vacation": "station",
  "van": "plan",
  "opinion": "minion",
  "door": "floor",
  "teaching": "preaching",
  "feet": "street",
  "authority": "majority",
  "mother": "brother",
  "rule": "fool",
  "son": "pun",
  "owner": "donor",
  "flowers": "towers",
  "horse": "corse",
  "wine": "line",
  "boy": "toy",
  "operation": "information",
  "wall": "hall",
  "tree": "bee",
  "distance": "resistance",
  "hair": "chair",
  "disease": "breeze",
  "ship": "clip",
  "ground": "wound",
  "hospital": "commital",
  "earth": "birth",
  "hall": "wall",
  "connection": "section",
  "blood": "flood",
  "sea": "glee",
  "station": "nation",
  "glass": "mass",
  "hill": "chill",
  "police": "peace",
  "bed": "dead",
  "voice": "choice",
  "answer": "dancer",
  "spring": "ring",
  "reason": "season",
  "idea": "urea",
  "fall": "wall",
  "song": "bong",
  "cause": "applause",
  "distribution": "pollution",
  "button": "glutton",
  "degree": "banshee",
  "summer": "drummer",
  "letter": "sweater",
  "channel": "panel",
  "airport": "court",
  "lead": "bead",
  "band": "hand",
  "machine": "queen",
  "division": "vision",
  "cable": "table",
  "move": "groove",
  "middle": "fiddle",
  "decision": "vision",
  "advice": "rice",
  "hour": "power",
  "addition": "mission",
  "wish": "dish",
  "hope": "rope",
  "selection": "section",
  "mind": "find",
  "organization": "information",
  "believe": "peeve",
  "condition": "admission",
  "exchange": "range",
  "dog": "frog",
  "stop": "shop",
  "river": "shiver",
  "force": "course",
  "income": "bum",
  "drug": "bug",
  "copy": "floppy",
  "activity": "captivity",
  "growth": "oath",
  "turn": "burn",
  "shoes": "schools",
  "thought": "dot",
  "base": "case",
  "bit": "pit",
  "oil": "soil",
  "face": "race",
  "loss": "boss",
  "writing": "lighting",
  "death": "breath",
  "holiday": "airway",
  "fire": "wire",
  "church": "search",
  "lake": "snake",
  "step": "rep",
  "sort": "short",
  "position": "mission",
  "manager": "tanager",
  "toys": "boys",
  "girl": "pearl",
  "error": "terror",
  "knowledge": "college",
  "heart": "start",
  "town": "crown",
  "weight": "wait",
  "watch": "match",
  "amount": "count",
  "fact": "pact",
  "cover": "lover",
  "reading": "heading",
  "rock": "block",
  "mark": "park",
  "thing": "fling",
  "talk": "walk",
  "word": "bird",
  "sound": "ground",
  "statement": "payment",
  "front": "rant",
  "record": "keyboard",
  "island": "highland",
  "window": "pillow",
  "land": "band",
  "weather": "ether",
  "gold": "mold",
  "able": "table",
  "cars": "stars",
  "trade": "shade",
  "friends": "bends",
  "elf": "self",
  "self": "elf",
  "color": "collar",
  "head": "lead",
  "net": "bet",
  "run": "fun",
  "learning": "earning",
  "baby": "maybe",
  "garden": "pardon",
  "meeting": "seating",
  "sun": "gun",
  "hand": "band",
  "committee": "city",
  "space": "race",
  "star": "car",
  "request": "quest",
  "event": "tent",
  "war": "chore",
  "light": "night",
  "range": "change",
  "night": "fight",
  "question": "session",
  "road": "code",
  "girls": "pearls",
  "example": "sample",
  "club": "pub",
  "paper": "shaper",
  "field": "shield",
  "body": "toddy",
  "key": "bee",
  "story": "glory",
  "memory": "emery",
  "act": "fact",
  "side": "tide",
  "park": "mark",
  "tax": "fax",
  "things": "kings",
  "street": "seat",
  "play": "day",
  "cart": "part",
  "friend": "bend",
  "test": "fest",
  "hot": "pot",
  "industry": "ministry",
  "air": "pair",
  "start": "art",
  "action": "faction",
  "table": "cable",
  "note": "boat",
  "week": "streak",
  "thread": "bread",
  "box": "fox",
  "team": "screen",
  "look": "book",
  "men": "pen",
  "point": "joint",
  "room": "moon",
  "process": "stress",
  "print": "hint",
  "food": "mood",
  "card": "board",
  "man": "van",
  "value": "virtue",
  "low": "show",
  "money": "honey",
  "class": "gas",
  "insurance": "assurance",
  "love": "glove",
  "form": "norm",
  "level": "bevel",
  "account": "discount",
  "children": "given",
  "government": "argument",
  "rate": "fate",
  "change": "range",
  "board": "chord",
  "shop": "drop",
  "guide": "bride",
  "art": "heart",
  "size": "prize",
  "history": "mystery",
  "water": "otter",
  "north": "forth",
  "end": "blend",
  "place": "race",
  "care": "air",
  "power": "flower",
  "game": "name",
  "house": "mouse",
  "sign": "dine",
  "show": "blow",
  "design": "whine",
  "car": "star",
  "education": "information",
  "line": "fine",
  "store": "shore",
  "part": "art",
  "way": "day",
  "map": "cap",
  "need": "feed",
  "group": "soup",
  "book": "look",
  "order": "border",
  "school": "pool",
  "support": "short",
  "number": "plumber",
  "system": "written;",
  "music": "cupid",
  "work": "quirk",
  "health": "wealth",
  "day": "way",
  "year": "air",
  "name": "frame",
  "list": "fist",
  "top": "shop",
  "back": "track",
  "price": "advice",
  "view": "two",
  "business": "fitness",
  "use": "news",
  "news": "views",
  "time": "crime",
  "page": "age",
  "can": "plan"
}

},{}],9:[function(require,module,exports){
module.exports={
  "advs": [
    "accidentally",
    "rarely",
    "recently",
    "sometimes",
    "soon",
    "today",
    "tomorrow",
    "usually",
    "yesterday",
    "angrily",
    "anxiously",
    "awkwardly",
    "badly",
    "beautifully",
    "blindly",
    "boldly",
    "bravely",
    "brightly",
    "busily",
    "calmly",
    "carefully",
    "carelessly",
    "cautiously",
    "cheerfully",
    "clearly",
    "closely",
    "correctly",
    "courageously",
    "cruelly",
    "daringly",
    "deliberately",
    "doubtfully",
    "eagerly",
    "easily",
    "elegantly",
    "enormously",
    "enthusiastically",
    "equally",
    "eventually",
    "exactly",
    "faithfully",
    "fast",
    "fatally",
    "fiercely",
    "fondly",
    "foolishly",
    "fortunately",
    "frankly",
    "frantically",
    "generously",
    "gently",
    "gladly",
    "gracefully",
    "greedily",
    "happily",
    "hard",
    "hastily",
    "healthily",
    "honestly",
    "hungrily",
    "hurriedly",
    "inadequately",
    "ingeniously",
    "innocently",
    "inquisitively",
    "irritably",
    "joyously",
    "justly",
    "kindly",
    "lazily",
    "loosely",
    "loudly",
    "madly",
    "mortally",
    "mysteriously",
    "neatly",
    "nervously",
    "noisily",
    "obediently",
    "openly",
    "painfully",
    "patiently",
    "perfectly",
    "politely",
    "poorly",
    "powerfully",
    "promptly",
    "punctually",
    "quickly",
    "quietly",
    "rapidly",
    "rarely",
    "really",
    "recklessly",
    "regularly",
    "reluctantly",
    "repeatedly",
    "rightfully",
    "roughly",
    "rudely",
    "sadly",
    "safely",
    "selfishly",
    "sensibly",
    "seriously",
    "sharply",
    "shyly",
    "silently",
    "sleepily",
    "slowly",
    "smoothly",
    "so",
    "softly",
    "solemnly",
    "speedily",
    "stealthily",
    "sternly",
    "straight",
    "stupidly",
    "successfully",
    "suddenly",
    "suspiciously",
    "swiftly",
    "tenderly",
    "tensely",
    "thoughtfully",
    "tightly",
    "truthfully",
    "unexpectedly",
    "victoriously",
    "violently",
    "vivaciously",
    "warmly",
    "weakly",
    "wearily",
    "well",
    "wildly",
    "wisely",
    "almost",
    "absolutely",
    "awfully",
    "badly",
    "barely",
    "completely",
    "decidedly",
    "deeply",
    "enough",
    "enormously",
    "entirely",
    "extremely",
    "fairly",
    "far",
    "fully",
    "greatly",
    "hardly",
    "highly",
    "how",
    "incredibly",
    "indeed",
    "intensely",
    "just",
    "least",
    "less",
    "little",
    "lots",
    "most",
    "much",
    "nearly",
    "perfectly",
    "positively",
    "practically",
    "pretty",
    "purely",
    "quite",
    "rather",
    "really",
    "scarcely",
    "simply",
    "so",
    "somewhat",
    "strongly",
    "terribly",
    "thoroughly",
    "too",
    "totally",
    "utterly",
    "very",
    "virtually",
    "well",
    "annually",
    "daily",
    "fortnightly",
    "hourly",
    "monthly",
    "nightly",
    "quarterly",
    "yearly",
    "now",
    "then",
    "today",
    "tomorrow",
    "tonight",
    "yesterday",
    "always",
    "constantly",
    "ever",
    "frequently",
    "generally",
    "infrequently",
    "never",
    "normally",
    "occasionally",
    "often",
    "rarely",
    "regularly",
    "seldom",
    "sometimes",
    "regularly",
    "usually",
    "already",
    "before",
    "early",
    "earlier",
    "eventually",
    "finally",
    "first",
    "formerly",
    "just",
    "last",
    "late",
    "later",
    "lately",
    "next",
    "now",
    "first",
    "next",
    "still",
    "really",
    "less",
    "red",
    "once",
    "already",
    "usually",
    "often",
    "soon",
    "actually",
    "almost",
    "probably",
    "especially",
    "finally",
    "fully",
    "sometimes",
    "highly",
    "generally",
    "approximately",
    "completely",
    "clearly",
    "frequently",
    "exactly",
    "slightly",
    "previously",
    "certainly",
    "mostly",
    "specifically",
    "totally",
    "truly",
    "properly",
    "absolutely",
    "significantly",
    "normally",
    "effectively",
    "possibly",
    "typically",
    "successfully",
    "eventually",
    "unfortunately",
    "respectively",
    "carefully",
    "strongly",
    "definitely",
    "necessarily",
    "apparently",
    "obviously",
    "somewhat",
    "entirely",
    "closely",
    "seriously",
    "fairly",
    "regularly",
    "partly",
    "increasingly",
    "basically",
    "rapidly",
    "greatly",
    "suddenly",
    "initially",
    "perfectly",
    "instantly",
    "ultimately",
    "equally",
    "naturally",
    "constantly",
    "hopefully",
    "strictly",
    "similarly",
    "solely",
    "occasionally",
    "separately",
    "somehow",
    "accordingly",
    "hardly",
    "additionally",
    "surely",
    "reasonably",
    "exclusively",
    "actively",
    "rarely",
    "heavily",
    "meanwhile",
    "shortly",
    "substantially",
    "deeply",
    "officially",
    "periodically",
    "independently",
    "consistently",
    "subsequently",
    "partially",
    "individually",
    "literally",
    "consequently",
    "barely",
    "roughly",
    "physically",
    "accurately",
    "explicitly",
    "specially",
    "proudly",
    "dramatically",
    "gently",
    "temporarily",
    "promptly",
    "badly",
    "presently",
    "beautifully",
    "sufficiently",
    "arrogantly",
    "awfully",
    "awkwardly",
    "bizarrely",
    "blatantly",
    "blazingly",
    "bloodily",
    "bravely",
    "brutally",
    "calmly",
    "carelessly",
    "casually",
    "chaotically",
    "cleanly",
    "colourfully",
    "comfortably",
    "communicatively",
    "competently",
    "complainingly",
    "compulsorily",
    "confidentially",
    "confusedly",
    "consciously",
    "contradictorily",
    "convincedly",
    "courageously",
    "cowardly",
    "creepily",
    "critically",
    "cryptically",
    "curiously",
    "cutely",
    "dangerously",
    "decently",
    "deceptively",
    "desperately",
    "dolorously",
    "evidently",
    "exaggeratedly",
    "excessively",
    "excitingly",
    "experimentally",
    "falteringly",
    "fanatically",
    "fatally",
    "flawlessly",
    "flexibly",
    "forcedly",
    "formally",
    "fortunately",
    "frankly",
    "fraudulently",
    "admirably",
    "funnily",
    "furiously",
    "adorably",
    "generously",
    "genially",
    "adoringly",
    "genuinely",
    "ghastly",
    "gigantically",
    "glamorously",
    "gloomily",
    "gluttonously",
    "gorgeously",
    "gracefully",
    "gracelessly",
    "graciously",
    "grammatically",
    "grandly",
    "grossly",
    "grotesquely",
    "guiltlessly",
    "handily",
    "handsomely",
    "haplessly",
    "happily",
    "harmfully",
    "harmlessly",
    "harmonically",
    "healthily",
    "heartlessly",
    "helpfully",
    "helplessly",
    "heroically",
    "hesitantly",
    "hiddenly",
    "hideously",
    "adversely",
    "aesthetically",
    "hilariously",
    "hintingly",
    "historically",
    "honestly",
    "honorably",
    "hopelessly",
    "horribly",
    "hugely",
    "humbly",
    "hysterically",
    "ignorantly",
    "illogically",
    "immaturely",
    "immensely",
    "immutably",
    "impatiently",
    "imperatively",
    "imperfectly",
    "implausibly",
    "affectionately",
    "improbably",
    "improperly",
    "impulsively",
    "inadequately",
    "inappropriately",
    "incessantly",
    "incompetently",
    "inconceivably",
    "inconveniently",
    "incredibly",
    "innocently",
    "insanely",
    "insatiably",
    "insecurely",
    "insensibly",
    "instinctively",
    "intelligently",
    "intentionally",
    "interestingly",
    "intermittently",
    "internally",
    "intimately",
    "involuntarily",
    "ironically",
    "irrationally",
    "irregularly",
    "irrelevantly",
    "irresistibly",
    "jealously",
    "jokingly",
    "kindly",
    "laboriously",
    "laughingly",
    "aggressively",
    "luckily",
    "majestically",
    "maliciously",
    "manipulatively",
    "marginally",
    "marvelously",
    "masterfully",
    "mathematically",
    "mechanically",
    "mentally",
    "mildly",
    "minimally",
    "miserably",
    "momentarily",
    "neatly",
    "neutrally",
    "nonchalantly",
    "notably",
    "openly",
    "optimally",
    "paradoxically"
  ],
  "adjs": [
    "new",
    "used",
    "available",
    "good",
    "high",
    "many",
    "great",
    "long",
    "black",
    "big",
    "small",
    "level",
    "old",
    "little",
    "low",
    "large",
    "better",
    "legal",
    "red",
    "young",
    "light",
    "green",
    "short",
    "daily",
    "average",
    "early",
    "bad",
    "fast",
    "economic",
    "various",
    "wide",
    "known",
    "half",
    "quick",
    "yellow",
    "political",
    "ad",
    "mature",
    "huge",
    "kind",
    "nice",
    "late",
    "friendly",
    "happy",
    "round",
    "excellent",
    "perfect",
    "beautiful",
    "modern",
    "cool",
    "deep",
    "internal",
    "detailed",
    "pretty",
    "fat",
    "helpful",
    "royal",
    "square",
    "successful",
    "historical",
    "scientific",
    "functional",
    "cold",
    "premium",
    "heavy",
    "orange",
    "determined",
    "wholesale",
    "funny",
    "brief",
    "alert",
    "dry",
    "broken",
    "rural",
    "null",
    "healthy",
    "minor",
    "rare",
    "dynamic",
    "exclusive",
    "wonderful",
    "ahead",
    "standing",
    "slow",
    "empty",
    "evil",
    "aware",
    "accurate",
    "organic",
    "wet",
    "ancient",
    "learned",
    "crazy",
    "efficient",
    "warm",
    "tested",
    "supreme",
    "ultra",
    "broad",
    "illegal",
    "typical",
    "temporary",
    "unable",
    "spiritual",
    "numerous",
    "comfortable",
    "massive",
    "bright",
    "accessible",
    "narrow",
    "willing",
    "strange",
    "tight",
    "expensive",
    "marked",
    "fantastic",
    "tiny",
    "proud",
    "giant",
    "quiet",
    "capable",
    "dirty",
    "alive",
    "purple",
    "subsequent",
    "acceptable",
    "ordinary",
    "knowing",
    "cloudy",
    "tall",
    "telling",
    "lucky",
    "lovely",
    "wooden",
    "tough",
    "weak",
    "wise",
    "romantic",
    "sad",
    "hurt",
    "elite",
    "unusual",
    "animated",
    "understood",
    "vast",
    "odd",
    "pleasant",
    "cooperative",
    "juvenile",
    "protective",
    "afraid",
    "acoustic",
    "spectacular",
    "drunk",
    "optimal",
    "loving",
    "exotic",
    "damaged",
    "tan",
    "excited",
    "precious",
    "therapeutic",
    "tender",
    "absent",
    "imported",
    "fancy",
    "dramatic",
    "elderly",
    "alleged",
    "lying",
    "bizarre",
    "gorgeous",
    "nervous",
    "deeply",
    "racial",
    "wanting",
    "nasty",
    "ugly",
    "mere",
    "mighty",
    "encouraging",
    "robust",
    "fabulous",
    "oval",
    "periodic",
    "aboriginal",
    "productive",
    "chubby",
    "gentle",
    "silly",
    "worried",
    "boring",
    "miniature",
    "wicked",
    "lean",
    "abandoned",
    "entertaining",
    "peaceful",
    "talented",
    "alike",
    "horrible",
    "hungry",
    "aquatic",
    "magical",
    "lazy",
    "petite",
    "selective",
    "educated",
    "painful",
    "scary",
    "upset",
    "hollow",
    "magnificent",
    "mysterious",
    "threatening",
    "filthy",
    "finicky",
    "flagrant",
    "flashy",
    "flawless",
    "flippant",
    "flowery",
    "foamy",
    "foregoing",
    "forgetful",
    "fortunate",
    "frail",
    "fretful",
    "billowy",
    "abiding",
    "abject",
    "furtive",
    "futuristic",
    "gabby",
    "gainful",
    "gamy",
    "gaping",
    "garrulous",
    "gaudy",
    "boiling",
    "boorish",
    "giddy",
    "gigantic",
    "glamorous",
    "glib",
    "glorious",
    "glossy",
    "godly",
    "acrid",
    "goofy",
    "boundless",
    "graceful",
    "grandiose",
    "brash",
    "greedy",
    "brawny",
    "groovy",
    "grotesque",
    "grouchy",
    "gruesome",
    "grumpy",
    "guarded",
    "guiltless",
    "gullible",
    "gusty",
    "guttural",
    "habitual",
    "breezy",
    "hallowed",
    "halting",
    "handsome",
    "handsomely",
    "hapless",
    "ablaze",
    "harmonious",
    "heady",
    "hoc",
    "heartbreaking",
    "heavenly",
    "adamant",
    "hellish",
    "adaptable",
    "hesitant",
    "bumpy",
    "highfalutin",
    "hilarious",
    "burly",
    "holistic",
    "cagey",
    "honorable",
    "callous",
    "hospitable",
    "addicted",
    "hulking",
    "humdrum",
    "humorous",
    "capricious",
    "hurried",
    "ceaseless",
    "hypnotic",
    "hysterical",
    "icky",
    "idiotic",
    "ignorant",
    "changeable",
    "illustrious",
    "imaginary",
    "immense",
    "imminent",
    "impartial",
    "imperfect",
    "cheerful",
    "incandescent",
    "incompetent",
    "inconclusive",
    "industrious",
    "innate",
    "instinctive",
    "childlike",
    "invincible",
    "irate",
    "itchy",
    "jaded",
    "jagged",
    "jazzy",
    "jealous",
    "jittery",
    "jobless",
    "jolly",
    "joyous",
    "judicious",
    "jumbled",
    "jumpy",
    "chilly",
    "kaput",
    "chivalrous",
    "kindhearted",
    "knotty",
    "adhesive",
    "knowledgeable",
    "chunky",
    "labored",
    "lackadaisical",
    "lacking",
    "lamentable",
    "languid",
    "clammy",
    "classy",
    "laughable",
    "lavish",
    "cloistered",
    "adjoining",
    "clumsy",
    "coherent",
    "lethal",
    "adorable",
    "lewd",
    "colossal",
    "likeable",
    "literate",
    "combative",
    "lively",
    "zonked",
    "longing",
    "lopsided",
    "loutish",
    "abnormal",
    "cooing",
    "agonizing",
    "lowly",
    "aboard",
    "ludicrous",
    "lush",
    "luxuriant",
    "courageous",
    "lyrical",
    "macabre",
    "macho",
    "maddening",
    "madly",
    "magenta",
    "cowardly",
    "crabby",
    "majestic",
    "makeshift",
    "malicious",
    "mammoth",
    "maniacal",
    "craven",
    "alcoholic",
    "credible",
    "materialistic",
    "creepy",
    "measly",
    "meek",
    "melodic",
    "merciful",
    "crooked",
    "cuddly",
    "mindless",
    "cultured",
    "curly",
    "miscreant",
    "moaning",
    "curved",
    "moldy",
    "momentous",
    "muddled",
    "mundane",
    "murky",
    "mushy",
    "cynical",
    "naive",
    "nappy",
    "daffy",
    "aback",
    "nauseating",
    "nebulous",
    "needless",
    "needy",
    "neighborly",
    "abortive",
    "damaging",
    "damp",
    "nifty",
    "noiseless",
    "noisy",
    "nonchalant",
    "nondescript",
    "nonstop",
    "nostalgic",
    "nosy",
    "noxious",
    "dapper",
    "numberless",
    "dashing",
    "nutritious",
    "oafish",
    "obedient",
    "obeisant",
    "obscene",
    "obsequious",
    "observant",
    "obsolete",
    "obtainable",
    "oceanic",
    "dazzling",
    "offbeat",
    "deadpan",
    "omniscient",
    "onerous",
    "debonair",
    "decisive",
    "decorous",
    "abounding",
    "ossified",
    "abrasive",
    "overconfident",
    "overjoyed",
    "overrated",
    "overt",
    "overwrought",
    "defective",
    "painstaking",
    "panoramic",
    "parched",
    "parsimonious",
    "pastoral",
    "pathetic",
    "delightful",
    "penitent",
    "demonic",
    "deranged",
    "permissible",
    "perpetual",
    "deserted",
    "phobic",
    "picayune",
    "piquant",
    "placid",
    "plausible",
    "alluring",
    "plucky",
    "pointless",
    "aloof",
    "possessive",
    "devilish",
    "didactic",
    "diligent",
    "prickly",
    "direful",
    "profuse",
    "ambiguous",
    "disagreeable",
    "psychedelic",
    "psychotic",
    "puffy",
    "pumped",
    "puny",
    "discreet",
    "quack",
    "quaint",
    "quarrelsome",
    "questionable",
    "disillusioned",
    "quickest",
    "dispensable",
    "quixotic",
    "quizzical",
    "rabid",
    "divergent",
    "ragged"
  ],
  "verbs": [
    "frees",
    "helps",
    "gets",
    "clicks",
    "finds",
    "lists",
    "heals",
    "goes",
    "adds",
    "centers",
    "designs",
    "addresses",
    "longs",
    "checks",
    "files",
    "cares",
    "ends",
    "controls",
    "guides",
    "levels",
    "forms",
    "calls",
    "compares",
    "includes",
    "joins",
    "looks",
    "airs",
    "comments",
    "acts",
    "gives",
    "experiences",
    "easts",
    "clubs",
    "browses",
    "courts",
    "lights",
    "hands",
    "becomes",
    "keeps",
    "enters",
    "heads",
    "colors",
    "closes",
    "drives",
    "asks",
    "displaies",
    "lands",
    "directs",
    "centres",
    "covers",
    "feels",
    "chooses",
    "clears",
    "chats",
    "faces",
    "increases",
    "advertises",
    "copies",
    "forces",
    "baies",
    "builds",
    "exchanges",
    "continues",
    "applies",
    "believes",
    "crosses",
    "hopes",
    "lowers",
    "leaves",
    "bids",
    "appropriates",
    "follows",
    "flashes",
    "leads",
    "allows",
    "contracts",
    "buttons",
    "focuses",
    "falls",
    "ideas",
    "answers",
    "approaches",
    "deals",
    "holds",
    "cuts",
    "improves",
    "grounds",
    "commands",
    "expresses",
    "distances",
    "brings",
    "catalogs",
    "charges",
    "cools",
    "grades",
    "considers",
    "hits",
    "fishes",
    "eyes",
    "breaks",
    "dances",
    "enjoies",
    "aids",
    "blocks",
    "agrees",
    "hears",
    "fans",
    "flows",
    "frames",
    "begins",
    "cleans",
    "connects",
    "cups",
    "demands",
    "advances",
    "corrects",
    "jumps",
    "balls",
    "listens",
    "discusses",
    "accepts",
    "appears",
    "determines",
    "bobs",
    "fits",
    "edges",
    "balances",
    "labels",
    "counts",
    "claims",
    "heats",
    "bugs",
    "guarantees",
    "loads",
    "drops",
    "challenges",
    "avoids",
    "corners",
    "abuses",
    "defines",
    "identifies",
    "inches",
    "attacks",
    "counters",
    "fills",
    "drafts",
    "expects",
    "harries",
    "dreams",
    "casts",
    "carries",
    "alerts",
    "interviews",
    "fixes",
    "handles",
    "bears",
    "dries",
    "explores",
    "blows",
    "clips",
    "judges",
    "fails",
    "assists",
    "conducts",
    "finishes",
    "forecasts",
    "drinks",
    "eats",
    "colours",
    "aims",
    "guesses",
    "fears",
    "comforts",
    "appeals",
    "beats",
    "hides",
    "influences",
    "empties",
    "discovers",
    "inks",
    "attempts",
    "forgets",
    "explains",
    "establishes",
    "describes",
    "coaches",
    "expands",
    "indicates",
    "loses",
    "circles",
    "launches",
    "bonds",
    "debates",
    "hops",
    "delivers",
    "draws",
    "assumes",
    "confirms",
    "inventories",
    "enhances",
    "bounds",
    "contributes",
    "locks",
    "estimates",
    "encourages",
    "delaies",
    "loops",
    "guards",
    "decides",
    "consents",
    "attends",
    "catches",
    "doubts",
    "inserts",
    "bargains",
    "chips",
    "echoes",
    "deposits",
    "calculates",
    "castles",
    "humors",
    "captures",
    "bangs",
    "imagines",
    "commits",
    "consoles",
    "angles",
    "cracks",
    "blinds",
    "lounges",
    "lectures",
    "laies",
    "evaluates",
    "collects",
    "bets",
    "exhibits",
    "escapes",
    "glances",
    "crashes",
    "lifts",
    "extends",
    "dusts",
    "demonstrates",
    "kisses",
    "dodges",
    "counsels",
    "bosses",
    "ignores",
    "drums",
    "eases",
    "appreciates",
    "boosts",
    "fingers",
    "burns",
    "lies",
    "leafs",
    "combines",
    "introduces",
    "examines",
    "communicates",
    "kicks",
    "hurts",
    "complies",
    "alternates",
    "assesses",
    "jams",
    "arcs",
    "heralds",
    "invites",
    "favors",
    "beams",
    "disciplines",
    "consults",
    "informs",
    "cries",
    "announces",
    "crowds",
    "hooks",
    "declines",
    "crops",
    "disputes",
    "carols",
    "curves",
    "chases",
    "extracts",
    "afraids",
    "bunches",
    "grills",
    "differs",
    "fakes",
    "arches",
    "brushes",
    "investigates",
    "assaults",
    "gauges",
    "engages",
    "cheats",
    "laughs",
    "blends",
    "bows",
    "chucks",
    "excludes",
    "folds",
    "attaches",
    "approves",
    "harvests",
    "bends",
    "competes",
    "drags",
    "adjusts",
    "jokes",
    "celebrates",
    "foams",
    "floats",
    "admits",
    "analyzes",
    "bares",
    "coordinates",
    "knees",
    "collapses",
    "argues",
    "advises",
    "ducks",
    "dives",
    "drills",
    "blames",
    "assures",
    "grips",
    "disagrees",
    "interacts",
    "flips",
    "buzzes",
    "booms",
    "calms",
    "alters",
    "amends",
    "advocates",
    "arranges",
    "bats",
    "gathers",
    "grabs",
    "laces",
    "encounters",
    "bundles",
    "hammers",
    "defends",
    "digs",
    "denies",
    "cites",
    "assigns",
    "accommodates",
    "dumps",
    "fences",
    "binds",
    "bucks",
    "divides",
    "acknowledges",
    "cautions",
    "hacks",
    "dares",
    "leans",
    "drains",
    "excuses",
    "dashes",
    "laps",
    "concludes",
    "bites",
    "accents",
    "hints",
    "inquires",
    "dips",
    "emploies",
    "flexes",
    "gossips",
    "elects",
    "concentrates",
    "keens",
    "climbs",
    "flushes",
    "declares",
    "dims",
    "discloses",
    "freezes",
    "compromises",
    "aligns",
    "blesses",
    "justifies",
    "glows",
    "blinks",
    "forges",
    "imposes",
    "bolts",
    "favours",
    "knocks",
    "cradles",
    "bursts",
    "knits",
    "drones",
    "conts",
    "contemplates",
    "contends",
    "betraies",
    "contorts",
    "bickers",
    "contradicts",
    "anticipates",
    "apologises",
    "converses",
    "conveies",
    "convinces",
    "convulses",
    "cooes",
    "apologizes",
    "cooperates",
    "adores",
    "blanches",
    "blares",
    "blasphemes",
    "cossets",
    "coughs",
    "blats",
    "blathers",
    "bleats",
    "counteracts",
    "bleeds",
    "adorns",
    "covets",
    "cowers",
    "cozens",
    "appeases",
    "applauds",
    "crams",
    "cranes",
    "accentuates",
    "craves",
    "crawls",
    "creases",
    "creeps",
    "crimps",
    "cringes",
    "crinkles",
    "criticises",
    "criticizes",
    "critiques",
    "croaks",
    "crooks",
    "croons",
    "appraises",
    "blots",
    "crouches",
    "crows",
    "aborts",
    "crumbles",
    "crumples",
    "crunches",
    "crushes",
    "blubbers",
    "cuddles",
    "cues",
    "cuffs",
    "bludgeons",
    "curbs",
    "curls",
    "curses",
    "curtseies",
    "curtsies",
    "bluffs",
    "cusses",
    "blunders",
    "dabs",
    "dabbles",
    "dallies",
    "dampens",
    "blurts",
    "dandles",
    "dangles",
    "blushes",
    "darkens",
    "darts",
    "blusters",
    "dawdles",
    "daydreams",
    "deadpans",
    "boasts",
    "absconds",
    "boggles",
    "deciphers",
    "declaims",
    "bolsters",
    "accompanies",
    "decorates",
    "decrees",
    "decries",
    "dedicates",
    "deduces",
    "deems",
    "affirms",
    "defers",
    "defiles",
    "bonks",
    "deflates",
    "deflects",
    "defies",
    "booes",
    "deliberates",
    "delegates",
    "affixes",
    "delves",
    "afks",
    "bops",
    "demurs",
    "denounces"
  ],
  "nouns": [
    "can",
    "page",
    "time",
    "news",
    "use",
    "business",
    "view",
    "price",
    "back",
    "top",
    "list",
    "name",
    "year",
    "day",
    "health",
    "work",
    "music",
    "system",
    "number",
    "support",
    "school",
    "order",
    "book",
    "group",
    "need",
    "map",
    "way",
    "part",
    "store",
    "line",
    "education",
    "car",
    "design",
    "show",
    "sign",
    "house",
    "game",
    "power",
    "care",
    "place",
    "end",
    "north",
    "water",
    "history",
    "size",
    "art",
    "guide",
    "shop",
    "board",
    "change",
    "rate",
    "government",
    "children",
    "account",
    "level",
    "form",
    "love",
    "insurance",
    "class",
    "money",
    "low",
    "value",
    "man",
    "card",
    "food",
    "print",
    "process",
    "room",
    "point",
    "men",
    "look",
    "team",
    "box",
    "thread",
    "week",
    "note",
    "table",
    "action",
    "start",
    "air",
    "industry",
    "hot",
    "test",
    "friend",
    "cart",
    "play",
    "street",
    "things",
    "tax",
    "park",
    "side",
    "act",
    "memory",
    "story",
    "key",
    "body",
    "field",
    "paper",
    "club",
    "example",
    "girls",
    "road",
    "question",
    "night",
    "range",
    "light",
    "war",
    "event",
    "request",
    "star",
    "space",
    "committee",
    "hand",
    "sun",
    "meeting",
    "garden",
    "baby",
    "learning",
    "run",
    "net",
    "head",
    "color",
    "self",
    "friends",
    "trade",
    "cars",
    "able",
    "gold",
    "weather",
    "land",
    "window",
    "island",
    "record",
    "front",
    "statement",
    "sound",
    "word",
    "talk",
    "thing",
    "mark",
    "rock",
    "reading",
    "cover",
    "fact",
    "amount",
    "watch",
    "weight",
    "town",
    "heart",
    "knowledge",
    "error",
    "girl",
    "toys",
    "manager",
    "position",
    "sort",
    "step",
    "lake",
    "church",
    "fire",
    "holiday",
    "death",
    "writing",
    "loss",
    "face",
    "oil",
    "bit",
    "base",
    "thought",
    "shoes",
    "turn",
    "growth",
    "activity",
    "copy",
    "drug",
    "income",
    "force",
    "river",
    "stop",
    "dog",
    "exchange",
    "condition",
    "believe",
    "organization",
    "mind",
    "selection",
    "hope",
    "wish",
    "addition",
    "hour",
    "advice",
    "decision",
    "middle",
    "move",
    "cable",
    "division",
    "machine",
    "band",
    "lead",
    "airport",
    "channel",
    "letter",
    "summer",
    "degree",
    "button",
    "distribution",
    "cause",
    "song",
    "fall",
    "idea",
    "reason",
    "spring",
    "answer",
    "voice",
    "bed",
    "police",
    "hill",
    "glass",
    "station",
    "sea",
    "blood",
    "connection",
    "hall",
    "earth",
    "hospital",
    "ground",
    "ship",
    "disease",
    "hair",
    "distance",
    "tree",
    "wall",
    "operation",
    "boy",
    "wine",
    "horse",
    "flowers",
    "owner",
    "son",
    "rule",
    "mother",
    "authority",
    "feet",
    "teaching",
    "door",
    "opinion",
    "van",
    "vacation",
    "skin",
    "ring",
    "grade",
    "mountain",
    "floor",
    "match",
    "boys",
    "morning",
    "rest",
    "plant",
    "fish",
    "eye",
    "string",
    "sense",
    "stage",
    "winter",
    "debt",
    "wood",
    "apple",
    "steel",
    "songs",
    "hands",
    "father",
    "respect",
    "trip",
    "eyes",
    "farm",
    "peace",
    "coast",
    "fiction",
    "fan",
    "transport",
    "cat",
    "parent",
    "scale",
    "frame",
    "secretary",
    "detail",
    "pet",
    "cup",
    "basket",
    "square",
    "attention",
    "army",
    "nation",
    "sheet",
    "jump",
    "minister",
    "motion",
    "chance",
    "ball",
    "wind",
    "leather",
    "stone",
    "pain",
    "edge",
    "root",
    "ice",
    "balance",
    "waste",
    "minute",
    "chair",
    "bag",
    "letters",
    "shirt",
    "apparel",
    "foot",
    "mass",
    "crime",
    "religion",
    "driving",
    "patch",
    "heat",
    "flight",
    "fuel",
    "walk",
    "pocket",
    "rose",
    "argument",
    "competition",
    "stream",
    "hearing",
    "drop",
    "guitar",
    "branch",
    "birth",
    "quarter",
    "plants",
    "chain",
    "attack",
    "plastic",
    "snow",
    "camp",
    "bridge",
    "baseball",
    "approval",
    "profit",
    "brother",
    "boat",
    "direction",
    "brain",
    "cast",
    "flower",
    "flag",
    "queen",
    "truck",
    "behavior",
    "ray",
    "measure",
    "bear",
    "ocean",
    "train",
    "route",
    "blow",
    "battle",
    "wire",
    "judge",
    "cent",
    "fight",
    "roll",
    "bath",
    "lawyer",
    "birthday",
    "mom",
    "sleep",
    "bird",
    "scene",
    "writer",
    "drink",
    "seat",
    "rings",
    "mine",
    "ticket",
    "dogs",
    "moon",
    "fly",
    "fear",
    "daughter",
    "trees",
    "dress",
    "sky",
    "toy",
    "spot",
    "clock",
    "feeling",
    "rain",
    "bedroom",
    "hole",
    "pets",
    "dinner",
    "cream",
    "shape",
    "cap",
    "ink",
    "wheel",
    "salt",
    "bell",
    "attempt",
    "noise",
    "pin",
    "sister",
    "trouble",
    "coach",
    "cook",
    "hat",
    "bike",
    "plate",
    "arm",
    "wave",
    "trail",
    "border",
    "notebook",
    "bears",
    "mouth",
    "gun",
    "fruit",
    "discovery",
    "legs",
    "stick",
    "relation",
    "lock",
    "brothers",
    "tank",
    "dolls",
    "territory",
    "paint",
    "hate",
    "rice",
    "expansion",
    "milk",
    "lunch",
    "push",
    "muscle",
    "calculator",
    "visitor",
    "spy",
    "suit",
    "birds",
    "journey",
    "pull",
    "plot",
    "pump",
    "afternoon",
    "beds",
    "reaction",
    "humor",
    "plane",
    "seed",
    "desire",
    "meat",
    "bone",
    "gate",
    "leg",
    "neck",
    "wing",
    "taste",
    "rail",
    "hobbies",
    "alarm",
    "pleasure",
    "quiet",
    "cheese",
    "crown",
    "crack",
    "smoke",
    "cake",
    "pen",
    "shoe",
    "sand",
    "actor",
    "fifth",
    "pipe",
    "horses",
    "existence",
    "chairs",
    "cats",
    "boats",
    "lift",
    "dad",
    "yard",
    "dust",
    "ear",
    "shock",
    "roof",
    "kiss",
    "beast",
    "surprise",
    "lamp",
    "copper",
    "receipt",
    "ghost",
    "throat",
    "wealth",
    "brass",
    "toe",
    "harbor",
    "drum",
    "smile",
    "trucks",
    "burn",
    "bread",
    "leaf",
    "rod",
    "silk"
  ]
}

},{}],10:[function(require,module,exports){
module.exports = (function(){
  var vocab = require("./data/vocabulary.json");
  var rhymes = require("./data/rhymes.json");
  var upperVocab = {};
  for (var key in vocab)
    upperVocab[key] = vocab[key].map(function(word){
      return word.toUpperCase();
    });
  function fromWords(w){
    var poem = "";
    var v = vocab;
    var a = v.nouns[w[4]], b = rhymes[a];
    poem += "The "+v.adjs[w[0]]+" "+v.nouns[w[1]]+" "+v.advs[w[2]]+" "+v.verbs[w[3]]+" the "+a+"\n";
    poem += "The "+v.adjs[w[5]]+" "+v.nouns[w[6]]+" "+v.advs[w[7]]+" "+v.verbs[w[8]]+" the "+b+"\n";
    return poem;
  };
  function toWords(poem){
    var words = poem.replace(/[^\w ]/g," ").split(" ").map(function(word){
      return word.toUpperCase();
    }).filter(function(word){
      return word && word !== "THE";
    });
    return [
      upperVocab.adjs.indexOf(words[0]),
      upperVocab.nouns.indexOf(words[1]),
      upperVocab.advs.indexOf(words[2]),
      upperVocab.verbs.indexOf(words[3]),
      upperVocab.nouns.indexOf(words[4]),
      upperVocab.adjs.indexOf(words[5]),
      upperVocab.nouns.indexOf(words[6]),
      upperVocab.advs.indexOf(words[7]),
      upperVocab.verbs.indexOf(words[8])];
  };
  return {
    fromWords: fromWords,
    toWords: toWords};
})();

},{"./data/rhymes.json":8,"./data/vocabulary.json":9}],11:[function(require,module,exports){
(function (process,Buffer){
!function(globals){
'use strict'

//*** UMD BEGIN
if (typeof define !== 'undefined' && define.amd) { //require.js / AMD
  define([], function() {
    return secureRandom
  })
} else if (typeof module !== 'undefined' && module.exports) { //CommonJS
  module.exports = secureRandom
} else { //script / browser
  globals.secureRandom = secureRandom
}
//*** UMD END

//options.type is the only valid option
function secureRandom(count, options) {
  options = options || {type: 'Array'}
  //we check for process.pid to prevent browserify from tricking us
  if (typeof process != 'undefined' && typeof process.pid == 'number') {
    return nodeRandom(count, options)
  } else {
    var crypto = window.crypto || window.msCrypto
    if (!crypto) throw new Error("Your browser does not support window.crypto.")
    return browserRandom(count, options)
  }
}

function nodeRandom(count, options) {
  var crypto = require('crypto')
  var buf = crypto.randomBytes(count)

  switch (options.type) {
    case 'Array':
      return [].slice.call(buf)
    case 'Buffer':
      return buf
    case 'Uint8Array':
      var arr = new Uint8Array(count)
      for (var i = 0; i < count; ++i) { arr[i] = buf.readUInt8(i) }
      return arr
    default:
      throw new Error(options.type + " is unsupported.")
  }
}

function browserRandom(count, options) {
  var nativeArr = new Uint8Array(count)
  var crypto = window.crypto || window.msCrypto
  crypto.getRandomValues(nativeArr)

  switch (options.type) {
    case 'Array':
      return [].slice.call(nativeArr)
    case 'Buffer':
      try { var b = new Buffer(1) } catch(e) { throw new Error('Buffer not supported in this environment. Use Node.js or Browserify for browser support.')}
      return new Buffer(nativeArr)
    case 'Uint8Array':
      return nativeArr
    default:
      throw new Error(options.type + " is unsupported.")
  }
}

secureRandom.randomArray = function(byteCount) {
  return secureRandom(byteCount, {type: 'Array'})
}

secureRandom.randomUint8Array = function(byteCount) {
  return secureRandom(byteCount, {type: 'Uint8Array'})
}

secureRandom.randomBuffer = function(byteCount) {
  return secureRandom(byteCount, {type: 'Buffer'})
}


}(this);

}).call(this,require('_process'),require("buffer").Buffer)

},{"_process":6,"buffer":3,"crypto":2}]},{},[7])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
